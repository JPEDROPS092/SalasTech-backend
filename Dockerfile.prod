# ===================================================# Instalar apenas dependências mínimas para run# Health check otimizado para Render
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${PORT}/healthz || exit 1

# Expor porta dinâmica do Render
EXPOSE ${PORT}

# Comando padrão
CMD ["./docker-entrypoint.sh"]apt-get update && apt-get install -y --no-install-recommends 
    curl 
    libpq-dev 
    postgresql-client 
    && rm -rf /var/lib/apt/lists/* 
    && apt-get clean

# Criar usuário não-root para segurança
RUN groupadd --gid 1001 salastech 
    && useradd --uid 1001 --gid salastech --shell /bin/bash --create-home salastech===============
# DOCKERFILE PARA PRODUÇÃO - SALASTECH (RENDER DEPLOYMENT)
# =============================================================================
# Multi-stage build para otimização e segurança

# Stage 1: Build stage
FROM python:3.11-slim as builder

# Variáveis de ambiente para build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Instalar dependências de sistema para build
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Criar diretório de trabalho
WORKDIR /build

# Copiar requirements e instalar dependências Python
COPY requirements.txt .
RUN pip install --user --no-warn-script-location -r requirements.txt

# Stage 2: Production stage
FROM python:3.11-slim

# Labels para metadados
LABEL maintainer="SalasTech Team" \
      version="1.0" \
      description="SalasTech Room Reservation System - Production Image (Render Deploy)" \
      com.render.service="true"

# Variáveis de ambiente para produção
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PATH="/home/salastech/.local/bin:$PATH" \
    ENVIRONMENT=production \
    PORT=10000 \
    HOST=0.0.0.0 \
    WORKERS=4 \
    LOG_LEVEL=info \
    FORWARDED_ALLOW_IPS="*" \
    PORT=8000 \
    HOST=0.0.0.0 \
    WORKERS=4

# Instalar apenas dependências mínimas para runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    dumb-init \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Criar usuário não-root para segurança
RUN groupadd --gid 1000 salastech \
    && useradd --uid 1000 --gid salastech --shell /bin/bash --create-home salastech

# Definir diretório de trabalho
WORKDIR /app

# Copiar dependências Python do stage de build
COPY --from=builder /root/.local /home/salastech/.local

# Copiar arquivos da aplicação (ordem otimizada para cache)
COPY --chown=salastech:salastech . .

# Criar e configurar diretórios necessários
RUN mkdir -p logs backups \
    && chown -R salastech:salastech /app \
    && chmod +x docker-entrypoint.sh \
    && chmod -R 755 /app/scripts/* \
    && mkdir -p /app/static \
    && mkdir -p /app/media \
    && chown -R salastech:salastech /app/static \
    && chown -R salastech:salastech /app/media

# Mudar para usuário não-root
USER salastech

# Expor porta
EXPOSE 8000

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Usar dumb-init para gerenciamento de processos
ENTRYPOINT ["dumb-init", "--"]

# Comando padrão
CMD ["./docker-entrypoint.sh"]
